#! /usr/bin/env python
import sys, random


if len(sys.argv) < 2:
    print >>sys.stderr, "USAGE: %s construct OR %s interact <num_labels>\n" % (sys.argv[0], sys.argv[0])
    sys.exit(1)
if sys.argv[0] == 'construct':
    sys.exit(0) 
if sys.argv[1] == 'interact':
  exploration_tradeoff = 0.1
  num_labels = int(sys.argv[2])
  labels = range(num_labels)
  weights = [dict() for x in labels]
  # read features for next example
  line = sys.stdin.readline()
  while line:
      # compute feature vector and scores
      features = {}
      score = [0.0 for x in labels]
      for token in line.strip().split():
          key, value = token.split(":")
          features[key] = float(value)
          for label in labels:
              if key in weights[label]:
                  score[label] += features[key] * weights[label][key]
      # compute winning label
      argmax = 0
      for label in labels:
          if score[label] > argmax:
              argmax = label
      # set distribution for exploration vs exploitation
      distribution = [1.0 * exploration_tradeoff / num_labels for x in labels]
      distribution[argmax] = 1.0 - exploration_tradeoff
      # sample from distribution
      n = random.uniform(0, sum(distribution))
      selected = 0
      for label in labels:
          if n < distribution[label]:
              selected = label
              break
          n -= distribution[label]
      # output selected label
      sys.stdout.write("%d\n" % (selected + 1))
      sys.stdout.flush()
      # read oracle
      line = sys.stdin.readline().strip()
      # update weights
      for key in features:
          for label in labels:
              factor = 0.0
              if label == selected and line == "yes":
                  factor += 1.0 / distribution[label]
              if label == argmax:
                  factor -= 1.0
              if key not in weights[label]: weights[label][key] = 0.0
              weights[label][key] += features[key] * factor
      # read features for next example
      line = sys.stdin.readline()
