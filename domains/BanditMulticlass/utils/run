#! /usr/bin/env python
import popen2, sys, yaml, re

def inspect(dataset):
    data = open(dataset)
    num_examples = 0
    max_feature = 0
    max_label = 0
    line_num = 0
    for line in data:
        line_num += 1
        tokens = line.split(" ")
        if len(tokens) == 0:
            sys.stderr.write("ERROR: empty line in %s, line %d\n" % (dataset, line_num))
            sys.exit(1)
        label = int(tokens[0])
        if label < 1:
            sys.stderr.write("ERROR: invalid label \"%s\", in %s, line %d\n" % (label, dataset, line_num))
        if label > max_label:
            max_label = label
        previous = 0
        for feature in tokens[1:]:
            found = re.match('^(\d+):([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)$', feature)
            if not found:
                sys.stderr.write("ERROR: invalid feature:value pair \"%s\", in %s, line %d\n" % (feature, dataset, line_num))
                sys.exit(1)
            key = int(found.group(1))
            if key <= previous:
                sys.stderr.write("ERROR: non-increasing or negative feature id \"%s\", in %s, line %d\n" % (feature, dataset, line_num))
                sys.exit(1)
            previous = key
            if key > max_feature:
                max_feature = key
        num_examples += 1
    data.close()
    status = open("./status", "w")
    status.write(yaml.dump({"numExamples": num_examples, "dim": max_feature + 1, "K": max_label + 1}))
    status.close()

def interact(learner, dataset, output):
    data = open(dataset)
    num_labels = max([int(x.split()[0]) for x in data.xreadlines()])
    data.seek(0)
    (child_out, child_in) = popen2.popen2("./%s interact %d" % (learner, num_labels))
    num = 0
    predictions = open(output, "w")
    for line in data:
        num += 1
        tokens = line.strip().split()
        label = tokens[0]
        features = " ".join(tokens[1:])
        child_in.write(features + "\n")
        child_in.flush()
        prediction = child_out.readline().strip()
        predictions.write(prediction + "\n")
        if int(prediction) < 1 or int(prediction) > num_labels:
            sys.stderr.write("ERROR: unexpected label \"%s\" from classifier, at example %d of %s\n" % (prediction, num, dataset))
            sys.exit(1)
        if prediction == label:
            child_in.write("yes\n")
        else:
            child_in.write("no\n")
        child_in.flush()
    predictions.close()
    data.close()
    child_in.close()
    child_out.close()

def evaluate(truth, predictions):
    trueLabels = [x.split()[0] for x in open(truth).xreadlines()]
    predLabels = [x.split()[0] for x in open(predictions).xreadlines()]
    if len(trueLabels) != len(predLabels):
        sys.stderr.write("ERROR: different number of labels (%d) and predictions (%d)\n" % (len(trueLabels), len(predLabels)))
        sys.exit(1)
    errors = 0
    for i in xrange(len(trueLabels)):
        if trueLabels[i] != predLabels[i]:
            errors += 1
    status = open("./status", "w")
    status.write(yaml.dump({"numErrors": errors, "numExamples": len(trueLabels), "errorRate": 1.0 * errors / len(trueLabels)}))
    status.close()

if len(sys.argv) < 2:
    sys.stderr.write("USAGE: %s [inspect <dataset>|interact <learner> <dataset> <predictions>|evaluate <dataset> <predictions>]\n" % sys.argv[0])
    sys.exit(1)
if sys.argv[1] == "inspect":
    inspect(sys.argv[2])
elif sys.argv[1] == "interact":
    interact(sys.argv[2], sys.argv[3], sys.argv[4])
elif sys.argv[1] == "evaluate":
    evaluate(sys.argv[2], sys.argv[3])
sys.exit(0)
